"""
Django settings for huawei_prototype project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG')

# TODO: Update allowed hosts to include the domain name of the Huawei Cloud ECS instance
allowed_hosts_env = os.getenv('DJANGO_ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',') if host.strip()]
# CSRF_TRUSTED_ORIGINS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'storages',  # Uncomment if using Huawei Cloud OBS for static files
    'dashboard',
    'geomap',
    'authentication',
    'archive',
    'cameras',
    'notifications',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'huawei_prototype.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'huawei_prototype.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}




# Base database configuration to use Huawei Cloud RDS and PostgreSQL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('DB_NAME'),
#         'USER': os.getenv('DB_USER', 'postgres'), # Default RDS username is often 'postgres' or 'root'
#         'PASSWORD': os.getenv('DB_PASSWORD'),
#         'HOST': os.getenv('DB_HOST'),
#         'PORT': os.getenv('DB_PORT', '5432'),
#     }
# }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'


# Huawei Cloud OBS configuration for static files
# OBS_STATIC_BUCKET_NAME = os.getenv('OBS_STATIC_BUCKET_NAME')
# HUAWEI_REGION = os.getenv('HUAWEI_REGION', 'ap-southeast-3') # Default to your region

# Use OBS for static files if configured and credentials are provided
# STATICFILES_STORAGE = 'storages.backends.OBSboto3.OBSBoto3Storage'
# HW_ACCESS_KEY_ID = os.getenv('HUAWEI_ACCESS_KEY')
# HW_SECRET_ACCESS_KEY = os.getenv('HUAWEI_SECRET_ACCESS_KEY')
# HW_STORAGE_BUCKET_NAME = OBS_STATIC_BUCKET_NAME
# HW_OBS_ENDPOINT_URL = f'https://obs.{HUAWEI_REGION}.myhuaweicloud.com'
# HW_OBS_REGION_NAME = HUAWEI_REGION
# # Use the website endpoint for serving files if the bucket is configured for static website hosting
# HW_OBS_CUSTOM_DOMAIN = f'{OBS_STATIC_BUCKET_NAME}.obs-website.{HUAWEI_REGION}.myhuaweicloud.com'
# HW_OBS_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400', # Cache static files for 1 day
# }
# HW_DEFAULT_ACL = 'public-read' # Make static files publicly readable
# HW_LOCATION = 'static' # Store static files in a 'static/' prefix in the bucket
# STATIC_URL = f'https://{HW_OBS_CUSTOM_DOMAIN}/{HW_LOCATION}/'

# REDIS_HOST = os.getenv('REDIS_HOST')
# if REDIS_HOST and os.getenv('REDIS_PASSWORD'):
#     CACHES = {
#         "default": {
#             "BACKEND": "django_redis.cache.RedisCache",
#             "LOCATION": f"redis://:{os.getenv('REDIS_PASSWORD')}@{REDIS_HOST}:{os.getenv('REDIS_PORT', '6379')}/1",
#             "OPTIONS": {
#                 "CLIENT_CLASS": "django_redis.client.DefaultClient",
#                 # Add connection pool options if needed
#                 # "CONNECTION_POOL_KWARGS": {"max_connections": 100}
#             }
#         }
#     }



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
